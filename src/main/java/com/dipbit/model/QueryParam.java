/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dipbit.model;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * *
 * parameters of the query operation
 * 
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-09-11")
public class QueryParam implements org.apache.thrift.TBase<QueryParam, QueryParam._Fields>, java.io.Serializable, Cloneable, Comparable<QueryParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryParam");

  private static final org.apache.thrift.protocol.TField START_RECEIVE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startReceiveTime", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField END_RECEIVE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endReceiveTime", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField START_BLOCK_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("startBlockHash", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField START_BLOCK_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("startBlockIndex", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new QueryParamStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new QueryParamTupleSchemeFactory();

  /**
   * the stat time of block received
   */
  public long startReceiveTime; // required
  /**
   * the end time of block received
   */
  public long endReceiveTime; // required
  /**
   * the start block hash
   */
  public java.lang.String startBlockHash; // optional
  /**
   * the start block index
   */
  public java.lang.String startBlockIndex; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * the stat time of block received
     */
    START_RECEIVE_TIME((short)1, "startReceiveTime"),
    /**
     * the end time of block received
     */
    END_RECEIVE_TIME((short)2, "endReceiveTime"),
    /**
     * the start block hash
     */
    START_BLOCK_HASH((short)3, "startBlockHash"),
    /**
     * the start block index
     */
    START_BLOCK_INDEX((short)4, "startBlockIndex");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // START_RECEIVE_TIME
          return START_RECEIVE_TIME;
        case 2: // END_RECEIVE_TIME
          return END_RECEIVE_TIME;
        case 3: // START_BLOCK_HASH
          return START_BLOCK_HASH;
        case 4: // START_BLOCK_INDEX
          return START_BLOCK_INDEX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STARTRECEIVETIME_ISSET_ID = 0;
  private static final int __ENDRECEIVETIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.START_BLOCK_HASH,_Fields.START_BLOCK_INDEX};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.START_RECEIVE_TIME, new org.apache.thrift.meta_data.FieldMetaData("startReceiveTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_RECEIVE_TIME, new org.apache.thrift.meta_data.FieldMetaData("endReceiveTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.START_BLOCK_HASH, new org.apache.thrift.meta_data.FieldMetaData("startBlockHash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_BLOCK_INDEX, new org.apache.thrift.meta_data.FieldMetaData("startBlockIndex", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryParam.class, metaDataMap);
  }

  public QueryParam() {
  }

  public QueryParam(
    long startReceiveTime,
    long endReceiveTime)
  {
    this();
    this.startReceiveTime = startReceiveTime;
    setStartReceiveTimeIsSet(true);
    this.endReceiveTime = endReceiveTime;
    setEndReceiveTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryParam(QueryParam other) {
    __isset_bitfield = other.__isset_bitfield;
    this.startReceiveTime = other.startReceiveTime;
    this.endReceiveTime = other.endReceiveTime;
    if (other.isSetStartBlockHash()) {
      this.startBlockHash = other.startBlockHash;
    }
    if (other.isSetStartBlockIndex()) {
      this.startBlockIndex = other.startBlockIndex;
    }
  }

  public QueryParam deepCopy() {
    return new QueryParam(this);
  }

  @Override
  public void clear() {
    setStartReceiveTimeIsSet(false);
    this.startReceiveTime = 0;
    setEndReceiveTimeIsSet(false);
    this.endReceiveTime = 0;
    this.startBlockHash = null;
    this.startBlockIndex = null;
  }

  /**
   * the stat time of block received
   */
  public long getStartReceiveTime() {
    return this.startReceiveTime;
  }

  /**
   * the stat time of block received
   */
  public QueryParam setStartReceiveTime(long startReceiveTime) {
    this.startReceiveTime = startReceiveTime;
    setStartReceiveTimeIsSet(true);
    return this;
  }

  public void unsetStartReceiveTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STARTRECEIVETIME_ISSET_ID);
  }

  /** Returns true if field startReceiveTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartReceiveTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STARTRECEIVETIME_ISSET_ID);
  }

  public void setStartReceiveTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STARTRECEIVETIME_ISSET_ID, value);
  }

  /**
   * the end time of block received
   */
  public long getEndReceiveTime() {
    return this.endReceiveTime;
  }

  /**
   * the end time of block received
   */
  public QueryParam setEndReceiveTime(long endReceiveTime) {
    this.endReceiveTime = endReceiveTime;
    setEndReceiveTimeIsSet(true);
    return this;
  }

  public void unsetEndReceiveTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENDRECEIVETIME_ISSET_ID);
  }

  /** Returns true if field endReceiveTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndReceiveTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENDRECEIVETIME_ISSET_ID);
  }

  public void setEndReceiveTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENDRECEIVETIME_ISSET_ID, value);
  }

  /**
   * the start block hash
   */
  public java.lang.String getStartBlockHash() {
    return this.startBlockHash;
  }

  /**
   * the start block hash
   */
  public QueryParam setStartBlockHash(java.lang.String startBlockHash) {
    this.startBlockHash = startBlockHash;
    return this;
  }

  public void unsetStartBlockHash() {
    this.startBlockHash = null;
  }

  /** Returns true if field startBlockHash is set (has been assigned a value) and false otherwise */
  public boolean isSetStartBlockHash() {
    return this.startBlockHash != null;
  }

  public void setStartBlockHashIsSet(boolean value) {
    if (!value) {
      this.startBlockHash = null;
    }
  }

  /**
   * the start block index
   */
  public java.lang.String getStartBlockIndex() {
    return this.startBlockIndex;
  }

  /**
   * the start block index
   */
  public QueryParam setStartBlockIndex(java.lang.String startBlockIndex) {
    this.startBlockIndex = startBlockIndex;
    return this;
  }

  public void unsetStartBlockIndex() {
    this.startBlockIndex = null;
  }

  /** Returns true if field startBlockIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetStartBlockIndex() {
    return this.startBlockIndex != null;
  }

  public void setStartBlockIndexIsSet(boolean value) {
    if (!value) {
      this.startBlockIndex = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case START_RECEIVE_TIME:
      if (value == null) {
        unsetStartReceiveTime();
      } else {
        setStartReceiveTime((java.lang.Long)value);
      }
      break;

    case END_RECEIVE_TIME:
      if (value == null) {
        unsetEndReceiveTime();
      } else {
        setEndReceiveTime((java.lang.Long)value);
      }
      break;

    case START_BLOCK_HASH:
      if (value == null) {
        unsetStartBlockHash();
      } else {
        setStartBlockHash((java.lang.String)value);
      }
      break;

    case START_BLOCK_INDEX:
      if (value == null) {
        unsetStartBlockIndex();
      } else {
        setStartBlockIndex((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case START_RECEIVE_TIME:
      return getStartReceiveTime();

    case END_RECEIVE_TIME:
      return getEndReceiveTime();

    case START_BLOCK_HASH:
      return getStartBlockHash();

    case START_BLOCK_INDEX:
      return getStartBlockIndex();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case START_RECEIVE_TIME:
      return isSetStartReceiveTime();
    case END_RECEIVE_TIME:
      return isSetEndReceiveTime();
    case START_BLOCK_HASH:
      return isSetStartBlockHash();
    case START_BLOCK_INDEX:
      return isSetStartBlockIndex();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryParam)
      return this.equals((QueryParam)that);
    return false;
  }

  public boolean equals(QueryParam that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_startReceiveTime = true;
    boolean that_present_startReceiveTime = true;
    if (this_present_startReceiveTime || that_present_startReceiveTime) {
      if (!(this_present_startReceiveTime && that_present_startReceiveTime))
        return false;
      if (this.startReceiveTime != that.startReceiveTime)
        return false;
    }

    boolean this_present_endReceiveTime = true;
    boolean that_present_endReceiveTime = true;
    if (this_present_endReceiveTime || that_present_endReceiveTime) {
      if (!(this_present_endReceiveTime && that_present_endReceiveTime))
        return false;
      if (this.endReceiveTime != that.endReceiveTime)
        return false;
    }

    boolean this_present_startBlockHash = true && this.isSetStartBlockHash();
    boolean that_present_startBlockHash = true && that.isSetStartBlockHash();
    if (this_present_startBlockHash || that_present_startBlockHash) {
      if (!(this_present_startBlockHash && that_present_startBlockHash))
        return false;
      if (!this.startBlockHash.equals(that.startBlockHash))
        return false;
    }

    boolean this_present_startBlockIndex = true && this.isSetStartBlockIndex();
    boolean that_present_startBlockIndex = true && that.isSetStartBlockIndex();
    if (this_present_startBlockIndex || that_present_startBlockIndex) {
      if (!(this_present_startBlockIndex && that_present_startBlockIndex))
        return false;
      if (!this.startBlockIndex.equals(that.startBlockIndex))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(startReceiveTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(endReceiveTime);

    hashCode = hashCode * 8191 + ((isSetStartBlockHash()) ? 131071 : 524287);
    if (isSetStartBlockHash())
      hashCode = hashCode * 8191 + startBlockHash.hashCode();

    hashCode = hashCode * 8191 + ((isSetStartBlockIndex()) ? 131071 : 524287);
    if (isSetStartBlockIndex())
      hashCode = hashCode * 8191 + startBlockIndex.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(QueryParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetStartReceiveTime()).compareTo(other.isSetStartReceiveTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartReceiveTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startReceiveTime, other.startReceiveTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEndReceiveTime()).compareTo(other.isSetEndReceiveTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndReceiveTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endReceiveTime, other.endReceiveTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStartBlockHash()).compareTo(other.isSetStartBlockHash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartBlockHash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startBlockHash, other.startBlockHash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStartBlockIndex()).compareTo(other.isSetStartBlockIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartBlockIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startBlockIndex, other.startBlockIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("QueryParam(");
    boolean first = true;

    sb.append("startReceiveTime:");
    sb.append(this.startReceiveTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endReceiveTime:");
    sb.append(this.endReceiveTime);
    first = false;
    if (isSetStartBlockHash()) {
      if (!first) sb.append(", ");
      sb.append("startBlockHash:");
      if (this.startBlockHash == null) {
        sb.append("null");
      } else {
        sb.append(this.startBlockHash);
      }
      first = false;
    }
    if (isSetStartBlockIndex()) {
      if (!first) sb.append(", ");
      sb.append("startBlockIndex:");
      if (this.startBlockIndex == null) {
        sb.append("null");
      } else {
        sb.append(this.startBlockIndex);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryParamStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public QueryParamStandardScheme getScheme() {
      return new QueryParamStandardScheme();
    }
  }

  private static class QueryParamStandardScheme extends org.apache.thrift.scheme.StandardScheme<QueryParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // START_RECEIVE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startReceiveTime = iprot.readI64();
              struct.setStartReceiveTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // END_RECEIVE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endReceiveTime = iprot.readI64();
              struct.setEndReceiveTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // START_BLOCK_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startBlockHash = iprot.readString();
              struct.setStartBlockHashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // START_BLOCK_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startBlockIndex = iprot.readString();
              struct.setStartBlockIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(START_RECEIVE_TIME_FIELD_DESC);
      oprot.writeI64(struct.startReceiveTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_RECEIVE_TIME_FIELD_DESC);
      oprot.writeI64(struct.endReceiveTime);
      oprot.writeFieldEnd();
      if (struct.startBlockHash != null) {
        if (struct.isSetStartBlockHash()) {
          oprot.writeFieldBegin(START_BLOCK_HASH_FIELD_DESC);
          oprot.writeString(struct.startBlockHash);
          oprot.writeFieldEnd();
        }
      }
      if (struct.startBlockIndex != null) {
        if (struct.isSetStartBlockIndex()) {
          oprot.writeFieldBegin(START_BLOCK_INDEX_FIELD_DESC);
          oprot.writeString(struct.startBlockIndex);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryParamTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public QueryParamTupleScheme getScheme() {
      return new QueryParamTupleScheme();
    }
  }

  private static class QueryParamTupleScheme extends org.apache.thrift.scheme.TupleScheme<QueryParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetStartReceiveTime()) {
        optionals.set(0);
      }
      if (struct.isSetEndReceiveTime()) {
        optionals.set(1);
      }
      if (struct.isSetStartBlockHash()) {
        optionals.set(2);
      }
      if (struct.isSetStartBlockIndex()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetStartReceiveTime()) {
        oprot.writeI64(struct.startReceiveTime);
      }
      if (struct.isSetEndReceiveTime()) {
        oprot.writeI64(struct.endReceiveTime);
      }
      if (struct.isSetStartBlockHash()) {
        oprot.writeString(struct.startBlockHash);
      }
      if (struct.isSetStartBlockIndex()) {
        oprot.writeString(struct.startBlockIndex);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.startReceiveTime = iprot.readI64();
        struct.setStartReceiveTimeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.endReceiveTime = iprot.readI64();
        struct.setEndReceiveTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.startBlockHash = iprot.readString();
        struct.setStartBlockHashIsSet(true);
      }
      if (incoming.get(3)) {
        struct.startBlockIndex = iprot.readString();
        struct.setStartBlockIndexIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

