/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dipbit.model;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * *
 * some wallet configuration
 * 
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-09-11")
public class CoinChannel implements org.apache.thrift.TBase<CoinChannel, CoinChannel._Fields>, java.io.Serializable, Cloneable, Comparable<CoinChannel> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CoinChannel");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("currency", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RPC_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("rpcURL", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField RPC_PROTOCOL_FIELD_DESC = new org.apache.thrift.protocol.TField("rpcProtocol", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField RPC_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("rpcPort", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField RPC_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("rpcPassword", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField RPC_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("rpcUser", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("config", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField EXTRA_FIELD_DESC = new org.apache.thrift.protocol.TField("extra", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CoinChannelStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CoinChannelTupleSchemeFactory();

  /**
   * unique ID for the wallet deployment
   */
  public java.lang.String id; // required
  /**
   * the alias name of the unique ID
   */
  public java.lang.String name; // required
  /**
   * the code of crypto currency, like ETH, BTC
   */
  public java.lang.String currency; // required
  /**
   * the rpc URL of the wallet
   */
  public java.lang.String rpcURL; // required
  /**
   * the rpc protocol of the wallet
   */
  public java.lang.String rpcProtocol; // required
  /**
   * the rpc port of the wallet
   */
  public int rpcPort; // required
  /**
   * the rpc password of the wallet
   */
  public java.lang.String rpcPassword; // optional
  /**
   * the rpc usser of the wallet
   */
  public java.lang.String rpcUser; // optional
  /**
   * other configuration of the walet, this will be a json string
   */
  public java.lang.String config; // optional
  /**
   * * reserved extra configuration, normally this should not be used
   */
  public java.lang.String extra; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * unique ID for the wallet deployment
     */
    ID((short)1, "id"),
    /**
     * the alias name of the unique ID
     */
    NAME((short)2, "name"),
    /**
     * the code of crypto currency, like ETH, BTC
     */
    CURRENCY((short)3, "currency"),
    /**
     * the rpc URL of the wallet
     */
    RPC_URL((short)4, "rpcURL"),
    /**
     * the rpc protocol of the wallet
     */
    RPC_PROTOCOL((short)5, "rpcProtocol"),
    /**
     * the rpc port of the wallet
     */
    RPC_PORT((short)6, "rpcPort"),
    /**
     * the rpc password of the wallet
     */
    RPC_PASSWORD((short)7, "rpcPassword"),
    /**
     * the rpc usser of the wallet
     */
    RPC_USER((short)8, "rpcUser"),
    /**
     * other configuration of the walet, this will be a json string
     */
    CONFIG((short)9, "config"),
    /**
     * * reserved extra configuration, normally this should not be used
     */
    EXTRA((short)10, "extra");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // CURRENCY
          return CURRENCY;
        case 4: // RPC_URL
          return RPC_URL;
        case 5: // RPC_PROTOCOL
          return RPC_PROTOCOL;
        case 6: // RPC_PORT
          return RPC_PORT;
        case 7: // RPC_PASSWORD
          return RPC_PASSWORD;
        case 8: // RPC_USER
          return RPC_USER;
        case 9: // CONFIG
          return CONFIG;
        case 10: // EXTRA
          return EXTRA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RPCPORT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RPC_PASSWORD,_Fields.RPC_USER,_Fields.CONFIG,_Fields.EXTRA};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("currency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RPC_URL, new org.apache.thrift.meta_data.FieldMetaData("rpcURL", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RPC_PROTOCOL, new org.apache.thrift.meta_data.FieldMetaData("rpcProtocol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RPC_PORT, new org.apache.thrift.meta_data.FieldMetaData("rpcPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RPC_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("rpcPassword", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RPC_USER, new org.apache.thrift.meta_data.FieldMetaData("rpcUser", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONFIG, new org.apache.thrift.meta_data.FieldMetaData("config", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTRA, new org.apache.thrift.meta_data.FieldMetaData("extra", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CoinChannel.class, metaDataMap);
  }

  public CoinChannel() {
  }

  public CoinChannel(
    java.lang.String id,
    java.lang.String name,
    java.lang.String currency,
    java.lang.String rpcURL,
    java.lang.String rpcProtocol,
    int rpcPort)
  {
    this();
    this.id = id;
    this.name = name;
    this.currency = currency;
    this.rpcURL = rpcURL;
    this.rpcProtocol = rpcProtocol;
    this.rpcPort = rpcPort;
    setRpcPortIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CoinChannel(CoinChannel other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetCurrency()) {
      this.currency = other.currency;
    }
    if (other.isSetRpcURL()) {
      this.rpcURL = other.rpcURL;
    }
    if (other.isSetRpcProtocol()) {
      this.rpcProtocol = other.rpcProtocol;
    }
    this.rpcPort = other.rpcPort;
    if (other.isSetRpcPassword()) {
      this.rpcPassword = other.rpcPassword;
    }
    if (other.isSetRpcUser()) {
      this.rpcUser = other.rpcUser;
    }
    if (other.isSetConfig()) {
      this.config = other.config;
    }
    if (other.isSetExtra()) {
      this.extra = other.extra;
    }
  }

  public CoinChannel deepCopy() {
    return new CoinChannel(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.name = null;
    this.currency = null;
    this.rpcURL = null;
    this.rpcProtocol = null;
    setRpcPortIsSet(false);
    this.rpcPort = 0;
    this.rpcPassword = null;
    this.rpcUser = null;
    this.config = null;
    this.extra = null;
  }

  /**
   * unique ID for the wallet deployment
   */
  public java.lang.String getId() {
    return this.id;
  }

  /**
   * unique ID for the wallet deployment
   */
  public CoinChannel setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * the alias name of the unique ID
   */
  public java.lang.String getName() {
    return this.name;
  }

  /**
   * the alias name of the unique ID
   */
  public CoinChannel setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * the code of crypto currency, like ETH, BTC
   */
  public java.lang.String getCurrency() {
    return this.currency;
  }

  /**
   * the code of crypto currency, like ETH, BTC
   */
  public CoinChannel setCurrency(java.lang.String currency) {
    this.currency = currency;
    return this;
  }

  public void unsetCurrency() {
    this.currency = null;
  }

  /** Returns true if field currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return this.currency != null;
  }

  public void setCurrencyIsSet(boolean value) {
    if (!value) {
      this.currency = null;
    }
  }

  /**
   * the rpc URL of the wallet
   */
  public java.lang.String getRpcURL() {
    return this.rpcURL;
  }

  /**
   * the rpc URL of the wallet
   */
  public CoinChannel setRpcURL(java.lang.String rpcURL) {
    this.rpcURL = rpcURL;
    return this;
  }

  public void unsetRpcURL() {
    this.rpcURL = null;
  }

  /** Returns true if field rpcURL is set (has been assigned a value) and false otherwise */
  public boolean isSetRpcURL() {
    return this.rpcURL != null;
  }

  public void setRpcURLIsSet(boolean value) {
    if (!value) {
      this.rpcURL = null;
    }
  }

  /**
   * the rpc protocol of the wallet
   */
  public java.lang.String getRpcProtocol() {
    return this.rpcProtocol;
  }

  /**
   * the rpc protocol of the wallet
   */
  public CoinChannel setRpcProtocol(java.lang.String rpcProtocol) {
    this.rpcProtocol = rpcProtocol;
    return this;
  }

  public void unsetRpcProtocol() {
    this.rpcProtocol = null;
  }

  /** Returns true if field rpcProtocol is set (has been assigned a value) and false otherwise */
  public boolean isSetRpcProtocol() {
    return this.rpcProtocol != null;
  }

  public void setRpcProtocolIsSet(boolean value) {
    if (!value) {
      this.rpcProtocol = null;
    }
  }

  /**
   * the rpc port of the wallet
   */
  public int getRpcPort() {
    return this.rpcPort;
  }

  /**
   * the rpc port of the wallet
   */
  public CoinChannel setRpcPort(int rpcPort) {
    this.rpcPort = rpcPort;
    setRpcPortIsSet(true);
    return this;
  }

  public void unsetRpcPort() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RPCPORT_ISSET_ID);
  }

  /** Returns true if field rpcPort is set (has been assigned a value) and false otherwise */
  public boolean isSetRpcPort() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RPCPORT_ISSET_ID);
  }

  public void setRpcPortIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RPCPORT_ISSET_ID, value);
  }

  /**
   * the rpc password of the wallet
   */
  public java.lang.String getRpcPassword() {
    return this.rpcPassword;
  }

  /**
   * the rpc password of the wallet
   */
  public CoinChannel setRpcPassword(java.lang.String rpcPassword) {
    this.rpcPassword = rpcPassword;
    return this;
  }

  public void unsetRpcPassword() {
    this.rpcPassword = null;
  }

  /** Returns true if field rpcPassword is set (has been assigned a value) and false otherwise */
  public boolean isSetRpcPassword() {
    return this.rpcPassword != null;
  }

  public void setRpcPasswordIsSet(boolean value) {
    if (!value) {
      this.rpcPassword = null;
    }
  }

  /**
   * the rpc usser of the wallet
   */
  public java.lang.String getRpcUser() {
    return this.rpcUser;
  }

  /**
   * the rpc usser of the wallet
   */
  public CoinChannel setRpcUser(java.lang.String rpcUser) {
    this.rpcUser = rpcUser;
    return this;
  }

  public void unsetRpcUser() {
    this.rpcUser = null;
  }

  /** Returns true if field rpcUser is set (has been assigned a value) and false otherwise */
  public boolean isSetRpcUser() {
    return this.rpcUser != null;
  }

  public void setRpcUserIsSet(boolean value) {
    if (!value) {
      this.rpcUser = null;
    }
  }

  /**
   * other configuration of the walet, this will be a json string
   */
  public java.lang.String getConfig() {
    return this.config;
  }

  /**
   * other configuration of the walet, this will be a json string
   */
  public CoinChannel setConfig(java.lang.String config) {
    this.config = config;
    return this;
  }

  public void unsetConfig() {
    this.config = null;
  }

  /** Returns true if field config is set (has been assigned a value) and false otherwise */
  public boolean isSetConfig() {
    return this.config != null;
  }

  public void setConfigIsSet(boolean value) {
    if (!value) {
      this.config = null;
    }
  }

  /**
   * * reserved extra configuration, normally this should not be used
   */
  public java.lang.String getExtra() {
    return this.extra;
  }

  /**
   * * reserved extra configuration, normally this should not be used
   */
  public CoinChannel setExtra(java.lang.String extra) {
    this.extra = extra;
    return this;
  }

  public void unsetExtra() {
    this.extra = null;
  }

  /** Returns true if field extra is set (has been assigned a value) and false otherwise */
  public boolean isSetExtra() {
    return this.extra != null;
  }

  public void setExtraIsSet(boolean value) {
    if (!value) {
      this.extra = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case CURRENCY:
      if (value == null) {
        unsetCurrency();
      } else {
        setCurrency((java.lang.String)value);
      }
      break;

    case RPC_URL:
      if (value == null) {
        unsetRpcURL();
      } else {
        setRpcURL((java.lang.String)value);
      }
      break;

    case RPC_PROTOCOL:
      if (value == null) {
        unsetRpcProtocol();
      } else {
        setRpcProtocol((java.lang.String)value);
      }
      break;

    case RPC_PORT:
      if (value == null) {
        unsetRpcPort();
      } else {
        setRpcPort((java.lang.Integer)value);
      }
      break;

    case RPC_PASSWORD:
      if (value == null) {
        unsetRpcPassword();
      } else {
        setRpcPassword((java.lang.String)value);
      }
      break;

    case RPC_USER:
      if (value == null) {
        unsetRpcUser();
      } else {
        setRpcUser((java.lang.String)value);
      }
      break;

    case CONFIG:
      if (value == null) {
        unsetConfig();
      } else {
        setConfig((java.lang.String)value);
      }
      break;

    case EXTRA:
      if (value == null) {
        unsetExtra();
      } else {
        setExtra((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case CURRENCY:
      return getCurrency();

    case RPC_URL:
      return getRpcURL();

    case RPC_PROTOCOL:
      return getRpcProtocol();

    case RPC_PORT:
      return getRpcPort();

    case RPC_PASSWORD:
      return getRpcPassword();

    case RPC_USER:
      return getRpcUser();

    case CONFIG:
      return getConfig();

    case EXTRA:
      return getExtra();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case CURRENCY:
      return isSetCurrency();
    case RPC_URL:
      return isSetRpcURL();
    case RPC_PROTOCOL:
      return isSetRpcProtocol();
    case RPC_PORT:
      return isSetRpcPort();
    case RPC_PASSWORD:
      return isSetRpcPassword();
    case RPC_USER:
      return isSetRpcUser();
    case CONFIG:
      return isSetConfig();
    case EXTRA:
      return isSetExtra();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof CoinChannel)
      return this.equals((CoinChannel)that);
    return false;
  }

  public boolean equals(CoinChannel that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_currency = true && this.isSetCurrency();
    boolean that_present_currency = true && that.isSetCurrency();
    if (this_present_currency || that_present_currency) {
      if (!(this_present_currency && that_present_currency))
        return false;
      if (!this.currency.equals(that.currency))
        return false;
    }

    boolean this_present_rpcURL = true && this.isSetRpcURL();
    boolean that_present_rpcURL = true && that.isSetRpcURL();
    if (this_present_rpcURL || that_present_rpcURL) {
      if (!(this_present_rpcURL && that_present_rpcURL))
        return false;
      if (!this.rpcURL.equals(that.rpcURL))
        return false;
    }

    boolean this_present_rpcProtocol = true && this.isSetRpcProtocol();
    boolean that_present_rpcProtocol = true && that.isSetRpcProtocol();
    if (this_present_rpcProtocol || that_present_rpcProtocol) {
      if (!(this_present_rpcProtocol && that_present_rpcProtocol))
        return false;
      if (!this.rpcProtocol.equals(that.rpcProtocol))
        return false;
    }

    boolean this_present_rpcPort = true;
    boolean that_present_rpcPort = true;
    if (this_present_rpcPort || that_present_rpcPort) {
      if (!(this_present_rpcPort && that_present_rpcPort))
        return false;
      if (this.rpcPort != that.rpcPort)
        return false;
    }

    boolean this_present_rpcPassword = true && this.isSetRpcPassword();
    boolean that_present_rpcPassword = true && that.isSetRpcPassword();
    if (this_present_rpcPassword || that_present_rpcPassword) {
      if (!(this_present_rpcPassword && that_present_rpcPassword))
        return false;
      if (!this.rpcPassword.equals(that.rpcPassword))
        return false;
    }

    boolean this_present_rpcUser = true && this.isSetRpcUser();
    boolean that_present_rpcUser = true && that.isSetRpcUser();
    if (this_present_rpcUser || that_present_rpcUser) {
      if (!(this_present_rpcUser && that_present_rpcUser))
        return false;
      if (!this.rpcUser.equals(that.rpcUser))
        return false;
    }

    boolean this_present_config = true && this.isSetConfig();
    boolean that_present_config = true && that.isSetConfig();
    if (this_present_config || that_present_config) {
      if (!(this_present_config && that_present_config))
        return false;
      if (!this.config.equals(that.config))
        return false;
    }

    boolean this_present_extra = true && this.isSetExtra();
    boolean that_present_extra = true && that.isSetExtra();
    if (this_present_extra || that_present_extra) {
      if (!(this_present_extra && that_present_extra))
        return false;
      if (!this.extra.equals(that.extra))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetCurrency()) ? 131071 : 524287);
    if (isSetCurrency())
      hashCode = hashCode * 8191 + currency.hashCode();

    hashCode = hashCode * 8191 + ((isSetRpcURL()) ? 131071 : 524287);
    if (isSetRpcURL())
      hashCode = hashCode * 8191 + rpcURL.hashCode();

    hashCode = hashCode * 8191 + ((isSetRpcProtocol()) ? 131071 : 524287);
    if (isSetRpcProtocol())
      hashCode = hashCode * 8191 + rpcProtocol.hashCode();

    hashCode = hashCode * 8191 + rpcPort;

    hashCode = hashCode * 8191 + ((isSetRpcPassword()) ? 131071 : 524287);
    if (isSetRpcPassword())
      hashCode = hashCode * 8191 + rpcPassword.hashCode();

    hashCode = hashCode * 8191 + ((isSetRpcUser()) ? 131071 : 524287);
    if (isSetRpcUser())
      hashCode = hashCode * 8191 + rpcUser.hashCode();

    hashCode = hashCode * 8191 + ((isSetConfig()) ? 131071 : 524287);
    if (isSetConfig())
      hashCode = hashCode * 8191 + config.hashCode();

    hashCode = hashCode * 8191 + ((isSetExtra()) ? 131071 : 524287);
    if (isSetExtra())
      hashCode = hashCode * 8191 + extra.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(CoinChannel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCurrency()).compareTo(other.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, other.currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRpcURL()).compareTo(other.isSetRpcURL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRpcURL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rpcURL, other.rpcURL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRpcProtocol()).compareTo(other.isSetRpcProtocol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRpcProtocol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rpcProtocol, other.rpcProtocol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRpcPort()).compareTo(other.isSetRpcPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRpcPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rpcPort, other.rpcPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRpcPassword()).compareTo(other.isSetRpcPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRpcPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rpcPassword, other.rpcPassword);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRpcUser()).compareTo(other.isSetRpcUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRpcUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rpcUser, other.rpcUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetConfig()).compareTo(other.isSetConfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.config, other.config);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExtra()).compareTo(other.isSetExtra());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtra()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extra, other.extra);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("CoinChannel(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currency:");
    if (this.currency == null) {
      sb.append("null");
    } else {
      sb.append(this.currency);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rpcURL:");
    if (this.rpcURL == null) {
      sb.append("null");
    } else {
      sb.append(this.rpcURL);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rpcProtocol:");
    if (this.rpcProtocol == null) {
      sb.append("null");
    } else {
      sb.append(this.rpcProtocol);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rpcPort:");
    sb.append(this.rpcPort);
    first = false;
    if (isSetRpcPassword()) {
      if (!first) sb.append(", ");
      sb.append("rpcPassword:");
      if (this.rpcPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.rpcPassword);
      }
      first = false;
    }
    if (isSetRpcUser()) {
      if (!first) sb.append(", ");
      sb.append("rpcUser:");
      if (this.rpcUser == null) {
        sb.append("null");
      } else {
        sb.append(this.rpcUser);
      }
      first = false;
    }
    if (isSetConfig()) {
      if (!first) sb.append(", ");
      sb.append("config:");
      if (this.config == null) {
        sb.append("null");
      } else {
        sb.append(this.config);
      }
      first = false;
    }
    if (isSetExtra()) {
      if (!first) sb.append(", ");
      sb.append("extra:");
      if (this.extra == null) {
        sb.append("null");
      } else {
        sb.append(this.extra);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CoinChannelStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CoinChannelStandardScheme getScheme() {
      return new CoinChannelStandardScheme();
    }
  }

  private static class CoinChannelStandardScheme extends org.apache.thrift.scheme.StandardScheme<CoinChannel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CoinChannel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currency = iprot.readString();
              struct.setCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RPC_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rpcURL = iprot.readString();
              struct.setRpcURLIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RPC_PROTOCOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rpcProtocol = iprot.readString();
              struct.setRpcProtocolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RPC_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rpcPort = iprot.readI32();
              struct.setRpcPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RPC_PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rpcPassword = iprot.readString();
              struct.setRpcPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RPC_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rpcUser = iprot.readString();
              struct.setRpcUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.config = iprot.readString();
              struct.setConfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // EXTRA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.extra = iprot.readString();
              struct.setExtraIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CoinChannel struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.currency != null) {
        oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
        oprot.writeString(struct.currency);
        oprot.writeFieldEnd();
      }
      if (struct.rpcURL != null) {
        oprot.writeFieldBegin(RPC_URL_FIELD_DESC);
        oprot.writeString(struct.rpcURL);
        oprot.writeFieldEnd();
      }
      if (struct.rpcProtocol != null) {
        oprot.writeFieldBegin(RPC_PROTOCOL_FIELD_DESC);
        oprot.writeString(struct.rpcProtocol);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RPC_PORT_FIELD_DESC);
      oprot.writeI32(struct.rpcPort);
      oprot.writeFieldEnd();
      if (struct.rpcPassword != null) {
        if (struct.isSetRpcPassword()) {
          oprot.writeFieldBegin(RPC_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.rpcPassword);
          oprot.writeFieldEnd();
        }
      }
      if (struct.rpcUser != null) {
        if (struct.isSetRpcUser()) {
          oprot.writeFieldBegin(RPC_USER_FIELD_DESC);
          oprot.writeString(struct.rpcUser);
          oprot.writeFieldEnd();
        }
      }
      if (struct.config != null) {
        if (struct.isSetConfig()) {
          oprot.writeFieldBegin(CONFIG_FIELD_DESC);
          oprot.writeString(struct.config);
          oprot.writeFieldEnd();
        }
      }
      if (struct.extra != null) {
        if (struct.isSetExtra()) {
          oprot.writeFieldBegin(EXTRA_FIELD_DESC);
          oprot.writeString(struct.extra);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CoinChannelTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CoinChannelTupleScheme getScheme() {
      return new CoinChannelTupleScheme();
    }
  }

  private static class CoinChannelTupleScheme extends org.apache.thrift.scheme.TupleScheme<CoinChannel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CoinChannel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetCurrency()) {
        optionals.set(2);
      }
      if (struct.isSetRpcURL()) {
        optionals.set(3);
      }
      if (struct.isSetRpcProtocol()) {
        optionals.set(4);
      }
      if (struct.isSetRpcPort()) {
        optionals.set(5);
      }
      if (struct.isSetRpcPassword()) {
        optionals.set(6);
      }
      if (struct.isSetRpcUser()) {
        optionals.set(7);
      }
      if (struct.isSetConfig()) {
        optionals.set(8);
      }
      if (struct.isSetExtra()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetCurrency()) {
        oprot.writeString(struct.currency);
      }
      if (struct.isSetRpcURL()) {
        oprot.writeString(struct.rpcURL);
      }
      if (struct.isSetRpcProtocol()) {
        oprot.writeString(struct.rpcProtocol);
      }
      if (struct.isSetRpcPort()) {
        oprot.writeI32(struct.rpcPort);
      }
      if (struct.isSetRpcPassword()) {
        oprot.writeString(struct.rpcPassword);
      }
      if (struct.isSetRpcUser()) {
        oprot.writeString(struct.rpcUser);
      }
      if (struct.isSetConfig()) {
        oprot.writeString(struct.config);
      }
      if (struct.isSetExtra()) {
        oprot.writeString(struct.extra);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CoinChannel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.currency = iprot.readString();
        struct.setCurrencyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.rpcURL = iprot.readString();
        struct.setRpcURLIsSet(true);
      }
      if (incoming.get(4)) {
        struct.rpcProtocol = iprot.readString();
        struct.setRpcProtocolIsSet(true);
      }
      if (incoming.get(5)) {
        struct.rpcPort = iprot.readI32();
        struct.setRpcPortIsSet(true);
      }
      if (incoming.get(6)) {
        struct.rpcPassword = iprot.readString();
        struct.setRpcPasswordIsSet(true);
      }
      if (incoming.get(7)) {
        struct.rpcUser = iprot.readString();
        struct.setRpcUserIsSet(true);
      }
      if (incoming.get(8)) {
        struct.config = iprot.readString();
        struct.setConfigIsSet(true);
      }
      if (incoming.get(9)) {
        struct.extra = iprot.readString();
        struct.setExtraIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

