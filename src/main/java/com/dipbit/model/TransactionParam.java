/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dipbit.model;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * *
 * parameters when create a transaction
 * 
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-09-11")
public class TransactionParam implements org.apache.thrift.TBase<TransactionParam, TransactionParam._Fields>, java.io.Serializable, Cloneable, Comparable<TransactionParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TransactionParam");

  private static final org.apache.thrift.protocol.TField IO_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("ioList", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CHANGE_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("changeAddress", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("properties", org.apache.thrift.protocol.TType.MAP, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TransactionParamStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TransactionParamTupleSchemeFactory();

  /**
   * transaction items
   */
  public java.util.List<TransactionIO> ioList; // required
  /**
   * ID of CoinChannel
   */
  public java.lang.String channelId; // required
  /**
   * when building the transaction, if you need to change to address
   */
  public Address changeAddress; // optional
  /**
   * extra properties, normally this will be empty for reserved usage
   */
  public java.util.Map<java.lang.String,java.lang.String> properties; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * transaction items
     */
    IO_LIST((short)1, "ioList"),
    /**
     * ID of CoinChannel
     */
    CHANNEL_ID((short)2, "channelId"),
    /**
     * when building the transaction, if you need to change to address
     */
    CHANGE_ADDRESS((short)3, "changeAddress"),
    /**
     * extra properties, normally this will be empty for reserved usage
     */
    PROPERTIES((short)4, "properties");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IO_LIST
          return IO_LIST;
        case 2: // CHANNEL_ID
          return CHANNEL_ID;
        case 3: // CHANGE_ADDRESS
          return CHANGE_ADDRESS;
        case 4: // PROPERTIES
          return PROPERTIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.CHANGE_ADDRESS,_Fields.PROPERTIES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IO_LIST, new org.apache.thrift.meta_data.FieldMetaData("ioList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "TransactionIO"))));
    tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANGE_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("changeAddress", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "Address")));
    tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TransactionParam.class, metaDataMap);
  }

  public TransactionParam() {
  }

  public TransactionParam(
    java.util.List<TransactionIO> ioList,
    java.lang.String channelId)
  {
    this();
    this.ioList = ioList;
    this.channelId = channelId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TransactionParam(TransactionParam other) {
    if (other.isSetIoList()) {
      java.util.List<TransactionIO> __this__ioList = new java.util.ArrayList<TransactionIO>(other.ioList.size());
      for (TransactionIO other_element : other.ioList) {
        __this__ioList.add(new TransactionIO(other_element));
      }
      this.ioList = __this__ioList;
    }
    if (other.isSetChannelId()) {
      this.channelId = other.channelId;
    }
    if (other.isSetChangeAddress()) {
      this.changeAddress = new Address(other.changeAddress);
    }
    if (other.isSetProperties()) {
      java.util.Map<java.lang.String,java.lang.String> __this__properties = new java.util.HashMap<java.lang.String,java.lang.String>(other.properties);
      this.properties = __this__properties;
    }
  }

  public TransactionParam deepCopy() {
    return new TransactionParam(this);
  }

  @Override
  public void clear() {
    this.ioList = null;
    this.channelId = null;
    this.changeAddress = null;
    this.properties = null;
  }

  public int getIoListSize() {
    return (this.ioList == null) ? 0 : this.ioList.size();
  }

  public java.util.Iterator<TransactionIO> getIoListIterator() {
    return (this.ioList == null) ? null : this.ioList.iterator();
  }

  public void addToIoList(TransactionIO elem) {
    if (this.ioList == null) {
      this.ioList = new java.util.ArrayList<TransactionIO>();
    }
    this.ioList.add(elem);
  }

  /**
   * transaction items
   */
  public java.util.List<TransactionIO> getIoList() {
    return this.ioList;
  }

  /**
   * transaction items
   */
  public TransactionParam setIoList(java.util.List<TransactionIO> ioList) {
    this.ioList = ioList;
    return this;
  }

  public void unsetIoList() {
    this.ioList = null;
  }

  /** Returns true if field ioList is set (has been assigned a value) and false otherwise */
  public boolean isSetIoList() {
    return this.ioList != null;
  }

  public void setIoListIsSet(boolean value) {
    if (!value) {
      this.ioList = null;
    }
  }

  /**
   * ID of CoinChannel
   */
  public java.lang.String getChannelId() {
    return this.channelId;
  }

  /**
   * ID of CoinChannel
   */
  public TransactionParam setChannelId(java.lang.String channelId) {
    this.channelId = channelId;
    return this;
  }

  public void unsetChannelId() {
    this.channelId = null;
  }

  /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelId() {
    return this.channelId != null;
  }

  public void setChannelIdIsSet(boolean value) {
    if (!value) {
      this.channelId = null;
    }
  }

  /**
   * when building the transaction, if you need to change to address
   */
  public Address getChangeAddress() {
    return this.changeAddress;
  }

  /**
   * when building the transaction, if you need to change to address
   */
  public TransactionParam setChangeAddress(Address changeAddress) {
    this.changeAddress = changeAddress;
    return this;
  }

  public void unsetChangeAddress() {
    this.changeAddress = null;
  }

  /** Returns true if field changeAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetChangeAddress() {
    return this.changeAddress != null;
  }

  public void setChangeAddressIsSet(boolean value) {
    if (!value) {
      this.changeAddress = null;
    }
  }

  public int getPropertiesSize() {
    return (this.properties == null) ? 0 : this.properties.size();
  }

  public void putToProperties(java.lang.String key, java.lang.String val) {
    if (this.properties == null) {
      this.properties = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.properties.put(key, val);
  }

  /**
   * extra properties, normally this will be empty for reserved usage
   */
  public java.util.Map<java.lang.String,java.lang.String> getProperties() {
    return this.properties;
  }

  /**
   * extra properties, normally this will be empty for reserved usage
   */
  public TransactionParam setProperties(java.util.Map<java.lang.String,java.lang.String> properties) {
    this.properties = properties;
    return this;
  }

  public void unsetProperties() {
    this.properties = null;
  }

  /** Returns true if field properties is set (has been assigned a value) and false otherwise */
  public boolean isSetProperties() {
    return this.properties != null;
  }

  public void setPropertiesIsSet(boolean value) {
    if (!value) {
      this.properties = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case IO_LIST:
      if (value == null) {
        unsetIoList();
      } else {
        setIoList((java.util.List<TransactionIO>)value);
      }
      break;

    case CHANNEL_ID:
      if (value == null) {
        unsetChannelId();
      } else {
        setChannelId((java.lang.String)value);
      }
      break;

    case CHANGE_ADDRESS:
      if (value == null) {
        unsetChangeAddress();
      } else {
        setChangeAddress((Address)value);
      }
      break;

    case PROPERTIES:
      if (value == null) {
        unsetProperties();
      } else {
        setProperties((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case IO_LIST:
      return getIoList();

    case CHANNEL_ID:
      return getChannelId();

    case CHANGE_ADDRESS:
      return getChangeAddress();

    case PROPERTIES:
      return getProperties();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case IO_LIST:
      return isSetIoList();
    case CHANNEL_ID:
      return isSetChannelId();
    case CHANGE_ADDRESS:
      return isSetChangeAddress();
    case PROPERTIES:
      return isSetProperties();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TransactionParam)
      return this.equals((TransactionParam)that);
    return false;
  }

  public boolean equals(TransactionParam that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_ioList = true && this.isSetIoList();
    boolean that_present_ioList = true && that.isSetIoList();
    if (this_present_ioList || that_present_ioList) {
      if (!(this_present_ioList && that_present_ioList))
        return false;
      if (!this.ioList.equals(that.ioList))
        return false;
    }

    boolean this_present_channelId = true && this.isSetChannelId();
    boolean that_present_channelId = true && that.isSetChannelId();
    if (this_present_channelId || that_present_channelId) {
      if (!(this_present_channelId && that_present_channelId))
        return false;
      if (!this.channelId.equals(that.channelId))
        return false;
    }

    boolean this_present_changeAddress = true && this.isSetChangeAddress();
    boolean that_present_changeAddress = true && that.isSetChangeAddress();
    if (this_present_changeAddress || that_present_changeAddress) {
      if (!(this_present_changeAddress && that_present_changeAddress))
        return false;
      if (!this.changeAddress.equals(that.changeAddress))
        return false;
    }

    boolean this_present_properties = true && this.isSetProperties();
    boolean that_present_properties = true && that.isSetProperties();
    if (this_present_properties || that_present_properties) {
      if (!(this_present_properties && that_present_properties))
        return false;
      if (!this.properties.equals(that.properties))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetIoList()) ? 131071 : 524287);
    if (isSetIoList())
      hashCode = hashCode * 8191 + ioList.hashCode();

    hashCode = hashCode * 8191 + ((isSetChannelId()) ? 131071 : 524287);
    if (isSetChannelId())
      hashCode = hashCode * 8191 + channelId.hashCode();

    hashCode = hashCode * 8191 + ((isSetChangeAddress()) ? 131071 : 524287);
    if (isSetChangeAddress())
      hashCode = hashCode * 8191 + changeAddress.hashCode();

    hashCode = hashCode * 8191 + ((isSetProperties()) ? 131071 : 524287);
    if (isSetProperties())
      hashCode = hashCode * 8191 + properties.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TransactionParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetIoList()).compareTo(other.isSetIoList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIoList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ioList, other.ioList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChannelId()).compareTo(other.isSetChannelId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelId, other.channelId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChangeAddress()).compareTo(other.isSetChangeAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChangeAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.changeAddress, other.changeAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProperties()).compareTo(other.isSetProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.properties, other.properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TransactionParam(");
    boolean first = true;

    sb.append("ioList:");
    if (this.ioList == null) {
      sb.append("null");
    } else {
      sb.append(this.ioList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelId:");
    if (this.channelId == null) {
      sb.append("null");
    } else {
      sb.append(this.channelId);
    }
    first = false;
    if (isSetChangeAddress()) {
      if (!first) sb.append(", ");
      sb.append("changeAddress:");
      if (this.changeAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.changeAddress);
      }
      first = false;
    }
    if (isSetProperties()) {
      if (!first) sb.append(", ");
      sb.append("properties:");
      if (this.properties == null) {
        sb.append("null");
      } else {
        sb.append(this.properties);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TransactionParamStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TransactionParamStandardScheme getScheme() {
      return new TransactionParamStandardScheme();
    }
  }

  private static class TransactionParamStandardScheme extends org.apache.thrift.scheme.StandardScheme<TransactionParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TransactionParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IO_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                struct.ioList = new java.util.ArrayList<TransactionIO>(_list18.size);
                TransactionIO _elem19;
                for (int _i20 = 0; _i20 < _list18.size; ++_i20)
                {
                  _elem19 = new TransactionIO();
                  _elem19.read(iprot);
                  struct.ioList.add(_elem19);
                }
                iprot.readListEnd();
              }
              struct.setIoListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHANNEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channelId = iprot.readString();
              struct.setChannelIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHANGE_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.changeAddress = new Address();
              struct.changeAddress.read(iprot);
              struct.setChangeAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map21 = iprot.readMapBegin();
                struct.properties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map21.size);
                java.lang.String _key22;
                java.lang.String _val23;
                for (int _i24 = 0; _i24 < _map21.size; ++_i24)
                {
                  _key22 = iprot.readString();
                  _val23 = iprot.readString();
                  struct.properties.put(_key22, _val23);
                }
                iprot.readMapEnd();
              }
              struct.setPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TransactionParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ioList != null) {
        oprot.writeFieldBegin(IO_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ioList.size()));
          for (TransactionIO _iter25 : struct.ioList)
          {
            _iter25.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.channelId != null) {
        oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
        oprot.writeString(struct.channelId);
        oprot.writeFieldEnd();
      }
      if (struct.changeAddress != null) {
        if (struct.isSetChangeAddress()) {
          oprot.writeFieldBegin(CHANGE_ADDRESS_FIELD_DESC);
          struct.changeAddress.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.properties != null) {
        if (struct.isSetProperties()) {
          oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.properties.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter26 : struct.properties.entrySet())
            {
              oprot.writeString(_iter26.getKey());
              oprot.writeString(_iter26.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TransactionParamTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TransactionParamTupleScheme getScheme() {
      return new TransactionParamTupleScheme();
    }
  }

  private static class TransactionParamTupleScheme extends org.apache.thrift.scheme.TupleScheme<TransactionParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TransactionParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetIoList()) {
        optionals.set(0);
      }
      if (struct.isSetChannelId()) {
        optionals.set(1);
      }
      if (struct.isSetChangeAddress()) {
        optionals.set(2);
      }
      if (struct.isSetProperties()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetIoList()) {
        {
          oprot.writeI32(struct.ioList.size());
          for (TransactionIO _iter27 : struct.ioList)
          {
            _iter27.write(oprot);
          }
        }
      }
      if (struct.isSetChannelId()) {
        oprot.writeString(struct.channelId);
      }
      if (struct.isSetChangeAddress()) {
        struct.changeAddress.write(oprot);
      }
      if (struct.isSetProperties()) {
        {
          oprot.writeI32(struct.properties.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter28 : struct.properties.entrySet())
          {
            oprot.writeString(_iter28.getKey());
            oprot.writeString(_iter28.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TransactionParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.ioList = new java.util.ArrayList<TransactionIO>(_list29.size);
          TransactionIO _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = new TransactionIO();
            _elem30.read(iprot);
            struct.ioList.add(_elem30);
          }
        }
        struct.setIoListIsSet(true);
      }
      if (incoming.get(1)) {
        struct.channelId = iprot.readString();
        struct.setChannelIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.changeAddress = new Address();
        struct.changeAddress.read(iprot);
        struct.setChangeAddressIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map32 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.properties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map32.size);
          java.lang.String _key33;
          java.lang.String _val34;
          for (int _i35 = 0; _i35 < _map32.size; ++_i35)
          {
            _key33 = iprot.readString();
            _val34 = iprot.readString();
            struct.properties.put(_key33, _val34);
          }
        }
        struct.setPropertiesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

