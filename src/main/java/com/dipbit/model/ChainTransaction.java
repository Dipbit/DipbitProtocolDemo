/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dipbit.model;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * *
 * the raw information returned by wallet after sending a transaction.
 * 
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-09-11")
public class ChainTransaction implements org.apache.thrift.TBase<ChainTransaction, ChainTransaction._Fields>, java.io.Serializable, Cloneable, Comparable<ChainTransaction> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ChainTransaction");

  private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("txId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("currency", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("fee", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CONFIRMATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("confirmations", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField BLOCK_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("blockHash", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField BLOCK_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("blockIndex", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField BLOCK_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("blockTime", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField RECEIVE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("receiveTime", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField TX_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("txResult", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField IO_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("ioList", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("properties", org.apache.thrift.protocol.TType.MAP, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ChainTransactionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ChainTransactionTupleSchemeFactory();

  /**
   * transaction mode
   * 
   * @see Category
   */
  public Category category; // required
  /**
   * transaction id
   */
  public java.lang.String txId; // required
  /**
   * currency name, for example ETC,BTH
   */
  public java.lang.String currency; // required
  /**
   * transaction status
   * 
   * @see TransactionStatus
   */
  public TransactionStatus status; // required
  /**
   * transaction fee
   */
  public java.lang.String fee; // required
  /**
   * confirmation number
   */
  public int confirmations; // required
  /**
   * block hash of the block containing this transaction
   */
  public java.lang.String blockHash; // required
  /**
   * block index of the block containing this transaction
   */
  public java.lang.String blockIndex; // optional
  /**
   * block time of the block generated
   */
  public long blockTime; // required
  /**
   * the time when the wallet receiving the block
   */
  public long receiveTime; // required
  /**
   * the raw block chain information
   */
  public java.lang.String txResult; // optional
  /**
   * transaction sending or receiving items
   */
  public java.util.List<TransactionIO> ioList; // required
  /**
   * reserved for furthur usage, other propeties
   */
  public java.util.Map<java.lang.String,java.lang.String> properties; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * transaction mode
     * 
     * @see Category
     */
    CATEGORY((short)1, "category"),
    /**
     * transaction id
     */
    TX_ID((short)2, "txId"),
    /**
     * currency name, for example ETC,BTH
     */
    CURRENCY((short)3, "currency"),
    /**
     * transaction status
     * 
     * @see TransactionStatus
     */
    STATUS((short)4, "status"),
    /**
     * transaction fee
     */
    FEE((short)5, "fee"),
    /**
     * confirmation number
     */
    CONFIRMATIONS((short)6, "confirmations"),
    /**
     * block hash of the block containing this transaction
     */
    BLOCK_HASH((short)7, "blockHash"),
    /**
     * block index of the block containing this transaction
     */
    BLOCK_INDEX((short)8, "blockIndex"),
    /**
     * block time of the block generated
     */
    BLOCK_TIME((short)9, "blockTime"),
    /**
     * the time when the wallet receiving the block
     */
    RECEIVE_TIME((short)10, "receiveTime"),
    /**
     * the raw block chain information
     */
    TX_RESULT((short)11, "txResult"),
    /**
     * transaction sending or receiving items
     */
    IO_LIST((short)12, "ioList"),
    /**
     * reserved for furthur usage, other propeties
     */
    PROPERTIES((short)13, "properties");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CATEGORY
          return CATEGORY;
        case 2: // TX_ID
          return TX_ID;
        case 3: // CURRENCY
          return CURRENCY;
        case 4: // STATUS
          return STATUS;
        case 5: // FEE
          return FEE;
        case 6: // CONFIRMATIONS
          return CONFIRMATIONS;
        case 7: // BLOCK_HASH
          return BLOCK_HASH;
        case 8: // BLOCK_INDEX
          return BLOCK_INDEX;
        case 9: // BLOCK_TIME
          return BLOCK_TIME;
        case 10: // RECEIVE_TIME
          return RECEIVE_TIME;
        case 11: // TX_RESULT
          return TX_RESULT;
        case 12: // IO_LIST
          return IO_LIST;
        case 13: // PROPERTIES
          return PROPERTIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CONFIRMATIONS_ISSET_ID = 0;
  private static final int __BLOCKTIME_ISSET_ID = 1;
  private static final int __RECEIVETIME_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.BLOCK_INDEX,_Fields.TX_RESULT,_Fields.PROPERTIES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Category.class)));
    tmpMap.put(_Fields.TX_ID, new org.apache.thrift.meta_data.FieldMetaData("txId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("currency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TransactionStatus.class)));
    tmpMap.put(_Fields.FEE, new org.apache.thrift.meta_data.FieldMetaData("fee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "BigDecimal")));
    tmpMap.put(_Fields.CONFIRMATIONS, new org.apache.thrift.meta_data.FieldMetaData("confirmations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BLOCK_HASH, new org.apache.thrift.meta_data.FieldMetaData("blockHash", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BLOCK_INDEX, new org.apache.thrift.meta_data.FieldMetaData("blockIndex", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BLOCK_TIME, new org.apache.thrift.meta_data.FieldMetaData("blockTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RECEIVE_TIME, new org.apache.thrift.meta_data.FieldMetaData("receiveTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TX_RESULT, new org.apache.thrift.meta_data.FieldMetaData("txResult", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IO_LIST, new org.apache.thrift.meta_data.FieldMetaData("ioList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransactionIO.class))));
    tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ChainTransaction.class, metaDataMap);
  }

  public ChainTransaction() {
  }

  public ChainTransaction(
    Category category,
    java.lang.String txId,
    java.lang.String currency,
    TransactionStatus status,
    java.lang.String fee,
    int confirmations,
    java.lang.String blockHash,
    long blockTime,
    long receiveTime,
    java.util.List<TransactionIO> ioList)
  {
    this();
    this.category = category;
    this.txId = txId;
    this.currency = currency;
    this.status = status;
    this.fee = fee;
    this.confirmations = confirmations;
    setConfirmationsIsSet(true);
    this.blockHash = blockHash;
    this.blockTime = blockTime;
    setBlockTimeIsSet(true);
    this.receiveTime = receiveTime;
    setReceiveTimeIsSet(true);
    this.ioList = ioList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ChainTransaction(ChainTransaction other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCategory()) {
      this.category = other.category;
    }
    if (other.isSetTxId()) {
      this.txId = other.txId;
    }
    if (other.isSetCurrency()) {
      this.currency = other.currency;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetFee()) {
      this.fee = other.fee;
    }
    this.confirmations = other.confirmations;
    if (other.isSetBlockHash()) {
      this.blockHash = other.blockHash;
    }
    if (other.isSetBlockIndex()) {
      this.blockIndex = other.blockIndex;
    }
    this.blockTime = other.blockTime;
    this.receiveTime = other.receiveTime;
    if (other.isSetTxResult()) {
      this.txResult = other.txResult;
    }
    if (other.isSetIoList()) {
      java.util.List<TransactionIO> __this__ioList = new java.util.ArrayList<TransactionIO>(other.ioList.size());
      for (TransactionIO other_element : other.ioList) {
        __this__ioList.add(new TransactionIO(other_element));
      }
      this.ioList = __this__ioList;
    }
    if (other.isSetProperties()) {
      java.util.Map<java.lang.String,java.lang.String> __this__properties = new java.util.HashMap<java.lang.String,java.lang.String>(other.properties);
      this.properties = __this__properties;
    }
  }

  public ChainTransaction deepCopy() {
    return new ChainTransaction(this);
  }

  @Override
  public void clear() {
    this.category = null;
    this.txId = null;
    this.currency = null;
    this.status = null;
    this.fee = null;
    setConfirmationsIsSet(false);
    this.confirmations = 0;
    this.blockHash = null;
    this.blockIndex = null;
    setBlockTimeIsSet(false);
    this.blockTime = 0;
    setReceiveTimeIsSet(false);
    this.receiveTime = 0;
    this.txResult = null;
    this.ioList = null;
    this.properties = null;
  }

  /**
   * transaction mode
   * 
   * @see Category
   */
  public Category getCategory() {
    return this.category;
  }

  /**
   * transaction mode
   * 
   * @see Category
   */
  public ChainTransaction setCategory(Category category) {
    this.category = category;
    return this;
  }

  public void unsetCategory() {
    this.category = null;
  }

  /** Returns true if field category is set (has been assigned a value) and false otherwise */
  public boolean isSetCategory() {
    return this.category != null;
  }

  public void setCategoryIsSet(boolean value) {
    if (!value) {
      this.category = null;
    }
  }

  /**
   * transaction id
   */
  public java.lang.String getTxId() {
    return this.txId;
  }

  /**
   * transaction id
   */
  public ChainTransaction setTxId(java.lang.String txId) {
    this.txId = txId;
    return this;
  }

  public void unsetTxId() {
    this.txId = null;
  }

  /** Returns true if field txId is set (has been assigned a value) and false otherwise */
  public boolean isSetTxId() {
    return this.txId != null;
  }

  public void setTxIdIsSet(boolean value) {
    if (!value) {
      this.txId = null;
    }
  }

  /**
   * currency name, for example ETC,BTH
   */
  public java.lang.String getCurrency() {
    return this.currency;
  }

  /**
   * currency name, for example ETC,BTH
   */
  public ChainTransaction setCurrency(java.lang.String currency) {
    this.currency = currency;
    return this;
  }

  public void unsetCurrency() {
    this.currency = null;
  }

  /** Returns true if field currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return this.currency != null;
  }

  public void setCurrencyIsSet(boolean value) {
    if (!value) {
      this.currency = null;
    }
  }

  /**
   * transaction status
   * 
   * @see TransactionStatus
   */
  public TransactionStatus getStatus() {
    return this.status;
  }

  /**
   * transaction status
   * 
   * @see TransactionStatus
   */
  public ChainTransaction setStatus(TransactionStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  /**
   * transaction fee
   */
  public java.lang.String getFee() {
    return this.fee;
  }

  /**
   * transaction fee
   */
  public ChainTransaction setFee(java.lang.String fee) {
    this.fee = fee;
    return this;
  }

  public void unsetFee() {
    this.fee = null;
  }

  /** Returns true if field fee is set (has been assigned a value) and false otherwise */
  public boolean isSetFee() {
    return this.fee != null;
  }

  public void setFeeIsSet(boolean value) {
    if (!value) {
      this.fee = null;
    }
  }

  /**
   * confirmation number
   */
  public int getConfirmations() {
    return this.confirmations;
  }

  /**
   * confirmation number
   */
  public ChainTransaction setConfirmations(int confirmations) {
    this.confirmations = confirmations;
    setConfirmationsIsSet(true);
    return this;
  }

  public void unsetConfirmations() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONFIRMATIONS_ISSET_ID);
  }

  /** Returns true if field confirmations is set (has been assigned a value) and false otherwise */
  public boolean isSetConfirmations() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONFIRMATIONS_ISSET_ID);
  }

  public void setConfirmationsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONFIRMATIONS_ISSET_ID, value);
  }

  /**
   * block hash of the block containing this transaction
   */
  public java.lang.String getBlockHash() {
    return this.blockHash;
  }

  /**
   * block hash of the block containing this transaction
   */
  public ChainTransaction setBlockHash(java.lang.String blockHash) {
    this.blockHash = blockHash;
    return this;
  }

  public void unsetBlockHash() {
    this.blockHash = null;
  }

  /** Returns true if field blockHash is set (has been assigned a value) and false otherwise */
  public boolean isSetBlockHash() {
    return this.blockHash != null;
  }

  public void setBlockHashIsSet(boolean value) {
    if (!value) {
      this.blockHash = null;
    }
  }

  /**
   * block index of the block containing this transaction
   */
  public java.lang.String getBlockIndex() {
    return this.blockIndex;
  }

  /**
   * block index of the block containing this transaction
   */
  public ChainTransaction setBlockIndex(java.lang.String blockIndex) {
    this.blockIndex = blockIndex;
    return this;
  }

  public void unsetBlockIndex() {
    this.blockIndex = null;
  }

  /** Returns true if field blockIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetBlockIndex() {
    return this.blockIndex != null;
  }

  public void setBlockIndexIsSet(boolean value) {
    if (!value) {
      this.blockIndex = null;
    }
  }

  /**
   * block time of the block generated
   */
  public long getBlockTime() {
    return this.blockTime;
  }

  /**
   * block time of the block generated
   */
  public ChainTransaction setBlockTime(long blockTime) {
    this.blockTime = blockTime;
    setBlockTimeIsSet(true);
    return this;
  }

  public void unsetBlockTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BLOCKTIME_ISSET_ID);
  }

  /** Returns true if field blockTime is set (has been assigned a value) and false otherwise */
  public boolean isSetBlockTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BLOCKTIME_ISSET_ID);
  }

  public void setBlockTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BLOCKTIME_ISSET_ID, value);
  }

  /**
   * the time when the wallet receiving the block
   */
  public long getReceiveTime() {
    return this.receiveTime;
  }

  /**
   * the time when the wallet receiving the block
   */
  public ChainTransaction setReceiveTime(long receiveTime) {
    this.receiveTime = receiveTime;
    setReceiveTimeIsSet(true);
    return this;
  }

  public void unsetReceiveTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECEIVETIME_ISSET_ID);
  }

  /** Returns true if field receiveTime is set (has been assigned a value) and false otherwise */
  public boolean isSetReceiveTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECEIVETIME_ISSET_ID);
  }

  public void setReceiveTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECEIVETIME_ISSET_ID, value);
  }

  /**
   * the raw block chain information
   */
  public java.lang.String getTxResult() {
    return this.txResult;
  }

  /**
   * the raw block chain information
   */
  public ChainTransaction setTxResult(java.lang.String txResult) {
    this.txResult = txResult;
    return this;
  }

  public void unsetTxResult() {
    this.txResult = null;
  }

  /** Returns true if field txResult is set (has been assigned a value) and false otherwise */
  public boolean isSetTxResult() {
    return this.txResult != null;
  }

  public void setTxResultIsSet(boolean value) {
    if (!value) {
      this.txResult = null;
    }
  }

  public int getIoListSize() {
    return (this.ioList == null) ? 0 : this.ioList.size();
  }

  public java.util.Iterator<TransactionIO> getIoListIterator() {
    return (this.ioList == null) ? null : this.ioList.iterator();
  }

  public void addToIoList(TransactionIO elem) {
    if (this.ioList == null) {
      this.ioList = new java.util.ArrayList<TransactionIO>();
    }
    this.ioList.add(elem);
  }

  /**
   * transaction sending or receiving items
   */
  public java.util.List<TransactionIO> getIoList() {
    return this.ioList;
  }

  /**
   * transaction sending or receiving items
   */
  public ChainTransaction setIoList(java.util.List<TransactionIO> ioList) {
    this.ioList = ioList;
    return this;
  }

  public void unsetIoList() {
    this.ioList = null;
  }

  /** Returns true if field ioList is set (has been assigned a value) and false otherwise */
  public boolean isSetIoList() {
    return this.ioList != null;
  }

  public void setIoListIsSet(boolean value) {
    if (!value) {
      this.ioList = null;
    }
  }

  public int getPropertiesSize() {
    return (this.properties == null) ? 0 : this.properties.size();
  }

  public void putToProperties(java.lang.String key, java.lang.String val) {
    if (this.properties == null) {
      this.properties = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.properties.put(key, val);
  }

  /**
   * reserved for furthur usage, other propeties
   */
  public java.util.Map<java.lang.String,java.lang.String> getProperties() {
    return this.properties;
  }

  /**
   * reserved for furthur usage, other propeties
   */
  public ChainTransaction setProperties(java.util.Map<java.lang.String,java.lang.String> properties) {
    this.properties = properties;
    return this;
  }

  public void unsetProperties() {
    this.properties = null;
  }

  /** Returns true if field properties is set (has been assigned a value) and false otherwise */
  public boolean isSetProperties() {
    return this.properties != null;
  }

  public void setPropertiesIsSet(boolean value) {
    if (!value) {
      this.properties = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case CATEGORY:
      if (value == null) {
        unsetCategory();
      } else {
        setCategory((Category)value);
      }
      break;

    case TX_ID:
      if (value == null) {
        unsetTxId();
      } else {
        setTxId((java.lang.String)value);
      }
      break;

    case CURRENCY:
      if (value == null) {
        unsetCurrency();
      } else {
        setCurrency((java.lang.String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((TransactionStatus)value);
      }
      break;

    case FEE:
      if (value == null) {
        unsetFee();
      } else {
        setFee((java.lang.String)value);
      }
      break;

    case CONFIRMATIONS:
      if (value == null) {
        unsetConfirmations();
      } else {
        setConfirmations((java.lang.Integer)value);
      }
      break;

    case BLOCK_HASH:
      if (value == null) {
        unsetBlockHash();
      } else {
        setBlockHash((java.lang.String)value);
      }
      break;

    case BLOCK_INDEX:
      if (value == null) {
        unsetBlockIndex();
      } else {
        setBlockIndex((java.lang.String)value);
      }
      break;

    case BLOCK_TIME:
      if (value == null) {
        unsetBlockTime();
      } else {
        setBlockTime((java.lang.Long)value);
      }
      break;

    case RECEIVE_TIME:
      if (value == null) {
        unsetReceiveTime();
      } else {
        setReceiveTime((java.lang.Long)value);
      }
      break;

    case TX_RESULT:
      if (value == null) {
        unsetTxResult();
      } else {
        setTxResult((java.lang.String)value);
      }
      break;

    case IO_LIST:
      if (value == null) {
        unsetIoList();
      } else {
        setIoList((java.util.List<TransactionIO>)value);
      }
      break;

    case PROPERTIES:
      if (value == null) {
        unsetProperties();
      } else {
        setProperties((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CATEGORY:
      return getCategory();

    case TX_ID:
      return getTxId();

    case CURRENCY:
      return getCurrency();

    case STATUS:
      return getStatus();

    case FEE:
      return getFee();

    case CONFIRMATIONS:
      return getConfirmations();

    case BLOCK_HASH:
      return getBlockHash();

    case BLOCK_INDEX:
      return getBlockIndex();

    case BLOCK_TIME:
      return getBlockTime();

    case RECEIVE_TIME:
      return getReceiveTime();

    case TX_RESULT:
      return getTxResult();

    case IO_LIST:
      return getIoList();

    case PROPERTIES:
      return getProperties();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CATEGORY:
      return isSetCategory();
    case TX_ID:
      return isSetTxId();
    case CURRENCY:
      return isSetCurrency();
    case STATUS:
      return isSetStatus();
    case FEE:
      return isSetFee();
    case CONFIRMATIONS:
      return isSetConfirmations();
    case BLOCK_HASH:
      return isSetBlockHash();
    case BLOCK_INDEX:
      return isSetBlockIndex();
    case BLOCK_TIME:
      return isSetBlockTime();
    case RECEIVE_TIME:
      return isSetReceiveTime();
    case TX_RESULT:
      return isSetTxResult();
    case IO_LIST:
      return isSetIoList();
    case PROPERTIES:
      return isSetProperties();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ChainTransaction)
      return this.equals((ChainTransaction)that);
    return false;
  }

  public boolean equals(ChainTransaction that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_category = true && this.isSetCategory();
    boolean that_present_category = true && that.isSetCategory();
    if (this_present_category || that_present_category) {
      if (!(this_present_category && that_present_category))
        return false;
      if (!this.category.equals(that.category))
        return false;
    }

    boolean this_present_txId = true && this.isSetTxId();
    boolean that_present_txId = true && that.isSetTxId();
    if (this_present_txId || that_present_txId) {
      if (!(this_present_txId && that_present_txId))
        return false;
      if (!this.txId.equals(that.txId))
        return false;
    }

    boolean this_present_currency = true && this.isSetCurrency();
    boolean that_present_currency = true && that.isSetCurrency();
    if (this_present_currency || that_present_currency) {
      if (!(this_present_currency && that_present_currency))
        return false;
      if (!this.currency.equals(that.currency))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_fee = true && this.isSetFee();
    boolean that_present_fee = true && that.isSetFee();
    if (this_present_fee || that_present_fee) {
      if (!(this_present_fee && that_present_fee))
        return false;
      if (!this.fee.equals(that.fee))
        return false;
    }

    boolean this_present_confirmations = true;
    boolean that_present_confirmations = true;
    if (this_present_confirmations || that_present_confirmations) {
      if (!(this_present_confirmations && that_present_confirmations))
        return false;
      if (this.confirmations != that.confirmations)
        return false;
    }

    boolean this_present_blockHash = true && this.isSetBlockHash();
    boolean that_present_blockHash = true && that.isSetBlockHash();
    if (this_present_blockHash || that_present_blockHash) {
      if (!(this_present_blockHash && that_present_blockHash))
        return false;
      if (!this.blockHash.equals(that.blockHash))
        return false;
    }

    boolean this_present_blockIndex = true && this.isSetBlockIndex();
    boolean that_present_blockIndex = true && that.isSetBlockIndex();
    if (this_present_blockIndex || that_present_blockIndex) {
      if (!(this_present_blockIndex && that_present_blockIndex))
        return false;
      if (!this.blockIndex.equals(that.blockIndex))
        return false;
    }

    boolean this_present_blockTime = true;
    boolean that_present_blockTime = true;
    if (this_present_blockTime || that_present_blockTime) {
      if (!(this_present_blockTime && that_present_blockTime))
        return false;
      if (this.blockTime != that.blockTime)
        return false;
    }

    boolean this_present_receiveTime = true;
    boolean that_present_receiveTime = true;
    if (this_present_receiveTime || that_present_receiveTime) {
      if (!(this_present_receiveTime && that_present_receiveTime))
        return false;
      if (this.receiveTime != that.receiveTime)
        return false;
    }

    boolean this_present_txResult = true && this.isSetTxResult();
    boolean that_present_txResult = true && that.isSetTxResult();
    if (this_present_txResult || that_present_txResult) {
      if (!(this_present_txResult && that_present_txResult))
        return false;
      if (!this.txResult.equals(that.txResult))
        return false;
    }

    boolean this_present_ioList = true && this.isSetIoList();
    boolean that_present_ioList = true && that.isSetIoList();
    if (this_present_ioList || that_present_ioList) {
      if (!(this_present_ioList && that_present_ioList))
        return false;
      if (!this.ioList.equals(that.ioList))
        return false;
    }

    boolean this_present_properties = true && this.isSetProperties();
    boolean that_present_properties = true && that.isSetProperties();
    if (this_present_properties || that_present_properties) {
      if (!(this_present_properties && that_present_properties))
        return false;
      if (!this.properties.equals(that.properties))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCategory()) ? 131071 : 524287);
    if (isSetCategory())
      hashCode = hashCode * 8191 + category.getValue();

    hashCode = hashCode * 8191 + ((isSetTxId()) ? 131071 : 524287);
    if (isSetTxId())
      hashCode = hashCode * 8191 + txId.hashCode();

    hashCode = hashCode * 8191 + ((isSetCurrency()) ? 131071 : 524287);
    if (isSetCurrency())
      hashCode = hashCode * 8191 + currency.hashCode();

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status.getValue();

    hashCode = hashCode * 8191 + ((isSetFee()) ? 131071 : 524287);
    if (isSetFee())
      hashCode = hashCode * 8191 + fee.hashCode();

    hashCode = hashCode * 8191 + confirmations;

    hashCode = hashCode * 8191 + ((isSetBlockHash()) ? 131071 : 524287);
    if (isSetBlockHash())
      hashCode = hashCode * 8191 + blockHash.hashCode();

    hashCode = hashCode * 8191 + ((isSetBlockIndex()) ? 131071 : 524287);
    if (isSetBlockIndex())
      hashCode = hashCode * 8191 + blockIndex.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(blockTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(receiveTime);

    hashCode = hashCode * 8191 + ((isSetTxResult()) ? 131071 : 524287);
    if (isSetTxResult())
      hashCode = hashCode * 8191 + txResult.hashCode();

    hashCode = hashCode * 8191 + ((isSetIoList()) ? 131071 : 524287);
    if (isSetIoList())
      hashCode = hashCode * 8191 + ioList.hashCode();

    hashCode = hashCode * 8191 + ((isSetProperties()) ? 131071 : 524287);
    if (isSetProperties())
      hashCode = hashCode * 8191 + properties.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ChainTransaction other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTxId()).compareTo(other.isSetTxId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txId, other.txId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCurrency()).compareTo(other.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, other.currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFee()).compareTo(other.isSetFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fee, other.fee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetConfirmations()).compareTo(other.isSetConfirmations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfirmations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confirmations, other.confirmations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBlockHash()).compareTo(other.isSetBlockHash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlockHash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockHash, other.blockHash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBlockIndex()).compareTo(other.isSetBlockIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlockIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockIndex, other.blockIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBlockTime()).compareTo(other.isSetBlockTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlockTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockTime, other.blockTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReceiveTime()).compareTo(other.isSetReceiveTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceiveTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiveTime, other.receiveTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTxResult()).compareTo(other.isSetTxResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txResult, other.txResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIoList()).compareTo(other.isSetIoList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIoList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ioList, other.ioList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProperties()).compareTo(other.isSetProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.properties, other.properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ChainTransaction(");
    boolean first = true;

    sb.append("category:");
    if (this.category == null) {
      sb.append("null");
    } else {
      sb.append(this.category);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("txId:");
    if (this.txId == null) {
      sb.append("null");
    } else {
      sb.append(this.txId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currency:");
    if (this.currency == null) {
      sb.append("null");
    } else {
      sb.append(this.currency);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fee:");
    if (this.fee == null) {
      sb.append("null");
    } else {
      sb.append(this.fee);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("confirmations:");
    sb.append(this.confirmations);
    first = false;
    if (!first) sb.append(", ");
    sb.append("blockHash:");
    if (this.blockHash == null) {
      sb.append("null");
    } else {
      sb.append(this.blockHash);
    }
    first = false;
    if (isSetBlockIndex()) {
      if (!first) sb.append(", ");
      sb.append("blockIndex:");
      if (this.blockIndex == null) {
        sb.append("null");
      } else {
        sb.append(this.blockIndex);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("blockTime:");
    sb.append(this.blockTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("receiveTime:");
    sb.append(this.receiveTime);
    first = false;
    if (isSetTxResult()) {
      if (!first) sb.append(", ");
      sb.append("txResult:");
      if (this.txResult == null) {
        sb.append("null");
      } else {
        sb.append(this.txResult);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("ioList:");
    if (this.ioList == null) {
      sb.append("null");
    } else {
      sb.append(this.ioList);
    }
    first = false;
    if (isSetProperties()) {
      if (!first) sb.append(", ");
      sb.append("properties:");
      if (this.properties == null) {
        sb.append("null");
      } else {
        sb.append(this.properties);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ChainTransactionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ChainTransactionStandardScheme getScheme() {
      return new ChainTransactionStandardScheme();
    }
  }

  private static class ChainTransactionStandardScheme extends org.apache.thrift.scheme.StandardScheme<ChainTransaction> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ChainTransaction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.category = com.dipbit.model.Category.findByValue(iprot.readI32());
              struct.setCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TX_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.txId = iprot.readString();
              struct.setTxIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currency = iprot.readString();
              struct.setCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = com.dipbit.model.TransactionStatus.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fee = iprot.readString();
              struct.setFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CONFIRMATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.confirmations = iprot.readI32();
              struct.setConfirmationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BLOCK_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.blockHash = iprot.readString();
              struct.setBlockHashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BLOCK_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.blockIndex = iprot.readString();
              struct.setBlockIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BLOCK_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.blockTime = iprot.readI64();
              struct.setBlockTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RECEIVE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.receiveTime = iprot.readI64();
              struct.setReceiveTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TX_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.txResult = iprot.readString();
              struct.setTxResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // IO_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                struct.ioList = new java.util.ArrayList<TransactionIO>(_list36.size);
                TransactionIO _elem37;
                for (int _i38 = 0; _i38 < _list36.size; ++_i38)
                {
                  _elem37 = new TransactionIO();
                  _elem37.read(iprot);
                  struct.ioList.add(_elem37);
                }
                iprot.readListEnd();
              }
              struct.setIoListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map39 = iprot.readMapBegin();
                struct.properties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map39.size);
                java.lang.String _key40;
                java.lang.String _val41;
                for (int _i42 = 0; _i42 < _map39.size; ++_i42)
                {
                  _key40 = iprot.readString();
                  _val41 = iprot.readString();
                  struct.properties.put(_key40, _val41);
                }
                iprot.readMapEnd();
              }
              struct.setPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ChainTransaction struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.category != null) {
        oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
        oprot.writeI32(struct.category.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.txId != null) {
        oprot.writeFieldBegin(TX_ID_FIELD_DESC);
        oprot.writeString(struct.txId);
        oprot.writeFieldEnd();
      }
      if (struct.currency != null) {
        oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
        oprot.writeString(struct.currency);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.fee != null) {
        oprot.writeFieldBegin(FEE_FIELD_DESC);
        oprot.writeString(struct.fee);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CONFIRMATIONS_FIELD_DESC);
      oprot.writeI32(struct.confirmations);
      oprot.writeFieldEnd();
      if (struct.blockHash != null) {
        oprot.writeFieldBegin(BLOCK_HASH_FIELD_DESC);
        oprot.writeString(struct.blockHash);
        oprot.writeFieldEnd();
      }
      if (struct.blockIndex != null) {
        if (struct.isSetBlockIndex()) {
          oprot.writeFieldBegin(BLOCK_INDEX_FIELD_DESC);
          oprot.writeString(struct.blockIndex);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(BLOCK_TIME_FIELD_DESC);
      oprot.writeI64(struct.blockTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECEIVE_TIME_FIELD_DESC);
      oprot.writeI64(struct.receiveTime);
      oprot.writeFieldEnd();
      if (struct.txResult != null) {
        if (struct.isSetTxResult()) {
          oprot.writeFieldBegin(TX_RESULT_FIELD_DESC);
          oprot.writeString(struct.txResult);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ioList != null) {
        oprot.writeFieldBegin(IO_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ioList.size()));
          for (TransactionIO _iter43 : struct.ioList)
          {
            _iter43.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.properties != null) {
        if (struct.isSetProperties()) {
          oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.properties.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter44 : struct.properties.entrySet())
            {
              oprot.writeString(_iter44.getKey());
              oprot.writeString(_iter44.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ChainTransactionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ChainTransactionTupleScheme getScheme() {
      return new ChainTransactionTupleScheme();
    }
  }

  private static class ChainTransactionTupleScheme extends org.apache.thrift.scheme.TupleScheme<ChainTransaction> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ChainTransaction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCategory()) {
        optionals.set(0);
      }
      if (struct.isSetTxId()) {
        optionals.set(1);
      }
      if (struct.isSetCurrency()) {
        optionals.set(2);
      }
      if (struct.isSetStatus()) {
        optionals.set(3);
      }
      if (struct.isSetFee()) {
        optionals.set(4);
      }
      if (struct.isSetConfirmations()) {
        optionals.set(5);
      }
      if (struct.isSetBlockHash()) {
        optionals.set(6);
      }
      if (struct.isSetBlockIndex()) {
        optionals.set(7);
      }
      if (struct.isSetBlockTime()) {
        optionals.set(8);
      }
      if (struct.isSetReceiveTime()) {
        optionals.set(9);
      }
      if (struct.isSetTxResult()) {
        optionals.set(10);
      }
      if (struct.isSetIoList()) {
        optionals.set(11);
      }
      if (struct.isSetProperties()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetCategory()) {
        oprot.writeI32(struct.category.getValue());
      }
      if (struct.isSetTxId()) {
        oprot.writeString(struct.txId);
      }
      if (struct.isSetCurrency()) {
        oprot.writeString(struct.currency);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
      if (struct.isSetFee()) {
        oprot.writeString(struct.fee);
      }
      if (struct.isSetConfirmations()) {
        oprot.writeI32(struct.confirmations);
      }
      if (struct.isSetBlockHash()) {
        oprot.writeString(struct.blockHash);
      }
      if (struct.isSetBlockIndex()) {
        oprot.writeString(struct.blockIndex);
      }
      if (struct.isSetBlockTime()) {
        oprot.writeI64(struct.blockTime);
      }
      if (struct.isSetReceiveTime()) {
        oprot.writeI64(struct.receiveTime);
      }
      if (struct.isSetTxResult()) {
        oprot.writeString(struct.txResult);
      }
      if (struct.isSetIoList()) {
        {
          oprot.writeI32(struct.ioList.size());
          for (TransactionIO _iter45 : struct.ioList)
          {
            _iter45.write(oprot);
          }
        }
      }
      if (struct.isSetProperties()) {
        {
          oprot.writeI32(struct.properties.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter46 : struct.properties.entrySet())
          {
            oprot.writeString(_iter46.getKey());
            oprot.writeString(_iter46.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ChainTransaction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.category = com.dipbit.model.Category.findByValue(iprot.readI32());
        struct.setCategoryIsSet(true);
      }
      if (incoming.get(1)) {
        struct.txId = iprot.readString();
        struct.setTxIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.currency = iprot.readString();
        struct.setCurrencyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.status = com.dipbit.model.TransactionStatus.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
      if (incoming.get(4)) {
        struct.fee = iprot.readString();
        struct.setFeeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.confirmations = iprot.readI32();
        struct.setConfirmationsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.blockHash = iprot.readString();
        struct.setBlockHashIsSet(true);
      }
      if (incoming.get(7)) {
        struct.blockIndex = iprot.readString();
        struct.setBlockIndexIsSet(true);
      }
      if (incoming.get(8)) {
        struct.blockTime = iprot.readI64();
        struct.setBlockTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.receiveTime = iprot.readI64();
        struct.setReceiveTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.txResult = iprot.readString();
        struct.setTxResultIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.ioList = new java.util.ArrayList<TransactionIO>(_list47.size);
          TransactionIO _elem48;
          for (int _i49 = 0; _i49 < _list47.size; ++_i49)
          {
            _elem48 = new TransactionIO();
            _elem48.read(iprot);
            struct.ioList.add(_elem48);
          }
        }
        struct.setIoListIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TMap _map50 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.properties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map50.size);
          java.lang.String _key51;
          java.lang.String _val52;
          for (int _i53 = 0; _i53 < _map50.size; ++_i53)
          {
            _key51 = iprot.readString();
            _val52 = iprot.readString();
            struct.properties.put(_key51, _val52);
          }
        }
        struct.setPropertiesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

